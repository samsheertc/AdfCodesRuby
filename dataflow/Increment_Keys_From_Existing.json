{
	"name": "Increment_Keys_From_Existing",
	"properties": {
		"folder": {
			"name": "RealTime"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureBlobCSV",
						"type": "DatasetReference"
					},
					"name": "AllEmp"
				},
				{
					"dataset": {
						"referenceName": "AzureBlobCSV",
						"type": "DatasetReference"
					},
					"name": "Delta"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureBlobCSV",
						"type": "DatasetReference"
					},
					"name": "AllEmpFinal"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select1"
				},
				{
					"name": "union1"
				},
				{
					"name": "sort1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          empname as string,",
				"          country as string,",
				"          department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> AllEmp",
				"source(output(",
				"          empname as string,",
				"          country as string,",
				"          department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Delta",
				"AllEmp derive(Dummy = 'XXX') ~> derivedColumn1",
				"derivedColumn1 aggregate(groupBy(Dummy),",
				"     Maxempid = max(empid)) ~> aggregate1",
				"aggregate1, Delta join(1 == 1,",
				"     joinType:'cross',",
				"     broadcast: 'auto')~> join1",
				"join1 keyGenerate(output(empid as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(empid = toString((empid+toInteger(Maxempid)))) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          empid,",
				"          empname,",
				"          country,",
				"          department",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, AllEmp union(byName: true)~> union1",
				"union1 sort(asc(empid, true)) ~> sort1",
				"sort1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['AllEmployee.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> AllEmpFinal"
			]
		}
	}
}